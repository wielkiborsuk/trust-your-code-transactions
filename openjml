#!/usr/bin/env bash
#######################################################################
#                                                                     #
# This is a wrapper script for OpenJML, which transforms the output   #
# into the format that can be easily integrated with IntelliJ IDEA's  #
# External Tools functionality.                                       #
#                                                                     #
# In order to use it in IntelliJ IDEA:                                #
# 1. Go to: Settings > Tools > External Tools                         #
# 2. Click "Add" [+]                                                  #
# 3. Configure the following attributes:                              #
#    * Program:                                                       #
#      <path/to/this/script>                                          #
#    * Arguments:                                                     #
#      -esc -sourcepath $Sourcepath$ -classpath $Classpath$           #
#      -dir $FileDir$                                                 #
#    * Output filters:                                                #
#      $FILE_PATH$\:$LINE$\:$COLUMN$\:⏎$FILE_PATH$\:$LINE$\:          #
# 4. (Optional) Define a shortcut for this tool (Settings > Keymap)   #
#                                                                     #
#######################################################################

##
# Adjust this variable to your location of Java 8 SDK
##
JAVA=/usr/lib/jvm/java-8-openjdk-amd64/bin/java

##
# Set this variable to the path containing OpenJML distribution
##
OPENJML_HOME=$HOME/expr/openjml

##
# Adjust the version of the prover to something actually
# distributed with your version of OpenJML.
##
SOLVER=${OPENJML_HOME}/Solvers-linux/z3-4.7.1

format_output() {
	awk '
	/(warning:|error:)/ { line1 = $0; lnr = NR; next }
	NR == lnr + 1 { line2 = $0; next }
	NR == lnr + 2 {
            idx = index($0, "^")
	    line1 = gensub(/:([0-9]+):/, ":\\1:" idx ":", "1", line1)
	    print line1
	    print line2
	    print $0
	    next
        }
	{ print }
	' \
	| sed \
	    -e $'s/warning:/\e[1m\e[33mwarning\e[0m:/g' \
	    -e $'s/error:/\e[1m\e[31merror\e[0m:/g'
}

${JAVA} \
	-jar ${OPENJML_HOME}/openjml.jar \
	-prover z3 \
	-exec "${SOLVER}" \
	"$@" 2>&1 \
	| format_output
